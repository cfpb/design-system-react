{"version":3,"mappings":"sIAAA,QAAe,CAACA,EAAMC,IAAS,CAC3B,MAAMC,EAAIF,EAAKC,GACf,OAAIC,EACO,OAAOA,GAAM,WAAaA,EAAG,EAAG,QAAQ,QAAQA,CAAC,EAErD,IAAI,QAAQ,CAACC,EAAGC,IAAW,EAC7B,OAAO,gBAAmB,WAAa,eAAiB,YAAYA,EAAO,KAAK,KAAM,IAAI,MAAM,oCAAsCH,CAAI,CAAC,CAAC,CACrJ,CAAK,CACL,ECAOI,MACL,kCAeA,OAbAC,0BACE,UACE,MAAe,YAEf,+9DACA,gBAEAC,YAA4B,IAGnB,SAGbC,GAAW,IAEb,+ICPO,UAAc,OAAEC,MAAMC,WAAoC,KAC/D,eACAC,aACAC,sCAEAJ,OAEA,MAAW,YAEX,wCACAK,sCAEA,iBACE,gCACY,yBACe,QAAUA,CAAS,EAGlD,EAEAC,SACEC,EACAC,SAAwB,UACxB,SAFa,GAKfA","names":["glob","path","v","_","reject","useIconSvg","useEffect","setIcon","icon","name","alt","fileName","classes","iconHtml","getShapeModifier","withBg","isSquare"],"sources":["../../../../../../../@vite/dynamic-import-helper","../../src/hooks/useIconSvg.tsx","../../src/components/Icon.tsx"],"sourcesContent":["export default (glob, path) => {\n    const v = glob[path];\n    if (v) {\n        return typeof v === 'function' ? v() : Promise.resolve(v);\n    }\n    return new Promise((_, reject) => {\n        (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(reject.bind(null, new Error('Unknown variable dynamic import: ' + path)));\n    });\n}","import { useEffect, useState } from 'react';\n\n/**\n * Dynamically import an SVG as a string\n *\n * @param path URL to SVG file\n * @returns string | null\n */\nexport const useIconSvg = (fileName: string) => {\n  let [icon, setIcon] = useState(null);\n\n  useEffect(() => {\n    const importSvg = async () => {\n      if (!fileName) return null;\n\n      const importedIcon = await import(`../assets/icons/${fileName}.svg?raw`);\n      if (!importedIcon || !importedIcon.default) return;\n\n      setIcon(importedIcon.default);\n    };\n\n    importSvg();\n  }, [fileName, setIcon]);\n\n  if (!icon) return null;\n  return icon;\n};\n","import classNames from 'classnames';\nimport { useIconSvg } from '../hooks/useIconSvg';\n\ninterface IconProperties {\n  name: string;\n  alt?: string;\n  withBg?: boolean;\n}\n\n/**\n * CFPB DS Icon\n *\n * https://cfpb.github.io/design-system/foundation/iconography\n *\n * @param name Canonical icon name\n * @param alt Alt text for image\n * @param withBg With background?\n * @returns ReactElement | null\n */\nexport const Icon = ({ name, alt, withBg = false }: IconProperties) => {\n  const shapeModifier = getShapeModifier(name, withBg);\n  const fileName = `${name}${shapeModifier}`;\n  const classes = ['cf-icon-svg', `cf-icon-svg__${fileName}`];\n\n  const icon = useIconSvg(fileName);\n\n  if (!icon) return null;\n\n  const iconAttributes = `class=\"${classNames(classes)}\" alt=\"${alt || name}\"`;\n  const iconHtml = `${icon}`.replace('<svg', `<svg ${iconAttributes} `);\n\n  return (\n    <span\n      className='cf-icon-svg-wrapper'\n      dangerouslySetInnerHTML={{ __html: iconHtml }}\n    />\n  );\n};\n\nconst getShapeModifier = (name: string, withBg: boolean) => {\n  if (!withBg) return '';\n  if (isSquare.has(name)) return '-square';\n  return '-round';\n};\n\nconst isSquare = new Set([\n  'email',\n  'facebook',\n  'flickr',\n  'github',\n  'linkedin',\n  'pinterest',\n  'twitter',\n  'youtube'\n]);\n"],"file":"assets/Icon.2f1b4faa.js"}