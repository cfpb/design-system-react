{"version":3,"mappings":";;;;gBAOC,UAAY,CAGZ,IAAIA,EAAS,CAAE,EAAC,eAGhB,SAASC,GAAa,CAGrB,QAFIC,EAAU,GAEL,EAAI,EAAG,EAAI,UAAU,OAAQ,IAAK,CAC1C,IAAIC,EAAM,UAAU,GACpB,GAAI,EAACA,EAEL,KAAIC,EAAU,OAAOD,EAErB,GAAIC,IAAY,UAAYA,IAAY,SACvCF,EAAQ,KAAKC,CAAG,UACN,MAAM,QAAQA,CAAG,GAC3B,GAAIA,EAAI,OAAQ,CACf,IAAIE,EAAQJ,EAAW,MAAM,KAAME,CAAG,EAClCE,GACHH,EAAQ,KAAKG,CAAK,CAEnB,UACSD,IAAY,SAAU,CAChC,GAAID,EAAI,WAAa,OAAO,UAAU,UAAY,CAACA,EAAI,SAAS,SAAQ,EAAG,SAAS,eAAe,EAAG,CACrGD,EAAQ,KAAKC,EAAI,SAAU,GAC3B,QACA,CAED,QAASG,KAAOH,EACXH,EAAO,KAAKG,EAAKG,CAAG,GAAKH,EAAIG,IAChCJ,EAAQ,KAAKI,CAAG,CAGlB,EACD,CAED,OAAOJ,EAAQ,KAAK,GAAG,CACvB,CAjCQK,kBAmC4BC,EAAO,SAC3CP,EAAW,QAAUA,EACrBO,UAAiBP,GAOjB,OAAO,WAAaA,CAEtB,4BC3DAQ,EAAeF,GAACG,EAAMC,IAAS,CAC3B,MAAMC,EAAIF,EAAKC,GACf,OAAIC,EACO,OAAOA,GAAM,WAAaA,EAAG,EAAG,QAAQ,QAAQA,CAAC,EAErD,IAAI,QAAQ,CAACC,EAAGC,IAAW,EAC7B,OAAO,gBAAmB,WAAa,eAAiB,YAAYA,EAAO,KAAK,KAAM,IAAI,MAAM,oCAAsCH,CAAI,CAAC,CAAC,CACrJ,CAAK,CACL,EARe,wCCQRI,QACL,kCAeA,OAbAC,yBACET,YACE,MAAe,YAEf,+9DACA,gBAEAU,YAA4B,EAN9B,cASW,SAGbC,GAAW,IAEb,EAlBO,2JCWA,YAAc,OAAEC,MAAMC,WAAoC,KAC/D,eACAC,aACAnB,sCAEAgB,OAEA,MAAW,YAEX,wCACAI,sCAEA,iBACE,gCACY,yBACe,QAAUA,CAAS,EAGlD,EAlBO,QAoBPC,WACEC,EACAC,SAAwB,UACxB,SAFa,GADf,oBAMAA","names":["hasOwn","classNames","classes","arg","argType","inner","key","__name","module","__variableDynamicImportRuntimeHelper","glob","path","v","_","reject","useIconSvg","useEffect","setIcon","icon","name","alt","fileName","iconHtml","getShapeModifier","withBg","isSquare"],"sources":["../../../node_modules/classnames/index.js","../../../../../../../../@vite/dynamic-import-helper","../../../src/hooks/useIconSvg.tsx","../../../src/components/Icon.tsx"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","export default (glob, path) => {\n    const v = glob[path];\n    if (v) {\n        return typeof v === 'function' ? v() : Promise.resolve(v);\n    }\n    return new Promise((_, reject) => {\n        (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(reject.bind(null, new Error('Unknown variable dynamic import: ' + path)));\n    });\n}","import { useEffect, useState } from 'react';\n\n/**\n * Dynamically import an SVG as a string\n *\n * @param path URL to SVG file\n * @returns string | null\n */\nexport const useIconSvg = (fileName: string) => {\n  let [icon, setIcon] = useState(null);\n\n  useEffect(() => {\n    const importSvg = async () => {\n      if (!fileName) return null;\n\n      const importedIcon = await import(`../assets/icons/${fileName}.svg?raw`);\n      if (!importedIcon || !importedIcon.default) return;\n\n      setIcon(importedIcon.default);\n    };\n\n    importSvg();\n  }, [fileName, setIcon]);\n\n  if (!icon) return null;\n  return icon;\n};\n","import classNames from 'classnames';\nimport { useIconSvg } from '../hooks/useIconSvg';\n\ninterface IconProperties {\n  name: string;\n  alt?: string;\n  withBg?: boolean;\n}\n\n/**\n * CFPB DS Icon\n *\n * https://cfpb.github.io/design-system/foundation/iconography\n *\n * @param name Canonical icon name\n * @param alt Alt text for image\n * @param withBg With background?\n * @returns ReactElement | null\n */\nexport const Icon = ({ name, alt, withBg = false }: IconProperties) => {\n  const shapeModifier = getShapeModifier(name, withBg);\n  const fileName = `${name}${shapeModifier}`;\n  const classes = ['cf-icon-svg', `cf-icon-svg__${fileName}`];\n\n  const icon = useIconSvg(fileName);\n\n  if (!icon) return null;\n\n  const iconAttributes = `class=\"${classNames(classes)}\" alt=\"${alt || name}\"`;\n  const iconHtml = `${icon}`.replace('<svg', `<svg ${iconAttributes} `);\n\n  return (\n    <span\n      className='cf-icon-svg-wrapper'\n      dangerouslySetInnerHTML={{ __html: iconHtml }}\n    />\n  );\n};\n\nconst getShapeModifier = (name: string, withBg: boolean) => {\n  if (!withBg) return '';\n  if (isSquare.has(name)) return '-square';\n  return '-round';\n};\n\nconst isSquare = new Set([\n  'email',\n  'facebook',\n  'flickr',\n  'github',\n  'linkedin',\n  'pinterest',\n  'twitter',\n  'youtube'\n]);\n"],"file":"assets/Icon.efc03920.js"}