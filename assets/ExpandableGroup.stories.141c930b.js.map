{"version":3,"file":"ExpandableGroup.stories.141c930b.js","sources":["../../src/components/ExpandableGroup.tsx"],"sourcesContent":["import CFPB_Expandable from '@cfpb/cfpb-expandables/src/Expandable';\nimport type { ReactElement } from 'react';\nimport React, { useEffect } from 'react';\nimport type { ExpandableProperties } from './Expandable';\n\nexport interface ExpandableGroupProperties {\n  groupId: string;\n  accordion?: boolean;\n  children?: ReactElement<ExpandableProperties>[];\n}\n\nexport const ExpandableGroup: React.FC<ExpandableGroupProperties> = ({\n  groupId,\n  accordion = false,\n  children\n}) => {\n  let cname = 'o-expandable-group';\n  if (accordion) cname += ' o-expandable-group__accordion';\n\n  useEffect(() => {\n    if (!accordion) return;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    CFPB_Expandable.init(document.querySelector(`#${groupId}`));\n  }, [accordion]);\n\n  const childrenWithProperties = React.Children.map(children, child => {\n    if (React.isValidElement(child) && accordion) {\n      return React.cloneElement(child, { inAccordion: accordion } as Pick<\n        ExpandableProperties,\n        'inAccordion'\n      >);\n    }\n    return child;\n  });\n  return (\n    <div id={groupId} className={cname}>\n      {childrenWithProperties}\n    </div>\n  );\n};\n\nexport default ExpandableGroup;\n"],"names":["ExpandableGroup","groupId","children","cname","accordion","useEffect","CFPB_Expandable","childrenWithProperties","React","child","_jsx"],"mappings":"+QAWO,MAAAA,EAAA,CAAA,CAA8D,QAAAC,EACnEA,UAAAA,EAAAA,GACY,SAAAC,CAEd,IAAA,CACE,IAAAC,EAAA,qBACAC,IAAeD,GAAAA,kCAEfE,EAAAA,QAAAA,UAAAA,IAAAA,CACE,CAAAD,GAGAE,EAAAA,KAAAA,SAAAA,cAAAA,IAAAA,GAAAA,CAAAA,CAA0D,EAAA,CAAAF,CAAA,CAAA,EAG5D,MAAAG,EAAAC,EAAA,SAAA,IAAAN,EAAAO,GACED,EAAA,eAAAC,CAAA,GAAAL,EACEI,EAAA,aAAAC,EAAA,CAAiC,YAAAL,CAAeA,CAAAA,EAKlDK,CAAOA,EAET,OAAAC,EAAA,MAAA,CACE,GAAAT,EAASA,UAAAA,EAAoBE,SAAAA,CAC1BI,CAAAA,CAGP;;;;;;;;;;;;;;;;;;;"}