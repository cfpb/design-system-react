{"version":3,"file":"Pagination.stories.d1535815.js","sources":["../../../src/utils/noOp.tsx","../../../src/components/Pagination.tsx"],"sourcesContent":["export const noOp = () => null;\n","import classnames from 'classnames';\nimport type { EventHandler, SyntheticEvent} from 'react';\nimport { useEffect, useState } from 'react';\nimport { noOp } from '../utils/noOp';\nimport { Icon } from './Icon';\nimport Label from './Label';\nimport TextInput from './TextInput';\n\nexport interface PaginationProps {\n  /** Currently displayed page number  */\n  page: number;\n  /** Total number of available pages */\n  pageCount: number;\n  /** Event handler for `Previous` button */\n  onClickPrev?: () => void;\n  /** Event handler for `Next` button */\n  onClickNext?: () => void;\n  /** Event handler for `Go` button */\n  onClickGo?: (arg?: any) => void;\n  /** Text label for Previous button */\n  prevLabel?: string;\n  /** Text label for Next button */\n  nextLabel?: string;\n}\n\nexport const Pagination = ({\n  page,\n  pageCount,\n  onClickPrev = noOp,\n  onClickNext = noOp,\n  onClickGo = noOp,\n  prevLabel = 'Previous',\n  nextLabel = 'Next'\n}: PaginationProps): React.ReactElement => {\n  const [pageNum, setPageNum] = useState(page);\n  useEffect(() => setPageNum(page), [page]);\n\n  return (\n    <nav className='m-pagination' role='navigation' aria-label='Pagination'>\n      <PaginationBtn\n        iconName='left'\n        onClick={onClickPrev}\n        label={prevLabel}\n        isPrev\n      />\n      <PaginationBtn\n        iconName='right'\n        onClick={onClickNext}\n        label={nextLabel}\n        isNext\n      />\n\n      <form\n        className='m-pagination_form'\n        action='#pagination_content'\n        onSubmit={e => {\n          e.preventDefault();\n          if (pageNum == page) return;\n          onClickGo(pageNum - 1);\n        }}\n      >\n        <PaginationInput\n          page={pageNum}\n          pageCount={pageCount}\n          onChange={setPageNum}\n        />\n        <PaginationSubmitBtn />\n      </form>\n    </nav>\n  );\n};\n\nconst PaginationSubmitBtn = () => (\n  <button\n    className='a-btn a-btn__link m-pagination_btn-submit'\n    id='m-pagination_btn-submit-default'\n    type='submit'\n  >\n    Go\n  </button>\n);\n\ninterface PaginationBtnProps {\n  iconName: string;\n  onClick: EventHandler<SyntheticEvent>;\n  label?: string;\n  isPrev?: boolean;\n  isNext?: boolean;\n}\nconst PaginationBtn = ({\n  iconName,\n  onClick,\n  label,\n  isPrev = false,\n  isNext = false\n}: PaginationBtnProps): React.ReactElement => {\n  const buttonCnames = ['a-btn'];\n  const iconCnames = ['a-btn_icon'];\n\n  if (isPrev) {\n    buttonCnames.push('m-pagination_btn-prev');\n    iconCnames.push('a-btn_icon__on-left');\n  } else {\n    buttonCnames.push('m-pagination_btn-next');\n    iconCnames.push('a-btn_icon__on-right');\n  }\n\n  return (\n    <button\n      type='button'\n      className={classnames(buttonCnames)}\n      onClick={onClick}\n    >\n      {isNext && label}\n      <span className={classnames(iconCnames)}>\n        {iconName && <Icon name={iconName} />}\n      </span>\n      {isPrev && label}\n    </button>\n  );\n};\n\ninterface PaginationInputProps {\n  page: number;\n  pageCount: number;\n  onChange: Function;\n}\nconst PaginationInput = ({\n  page,\n  pageCount,\n  onChange\n}: PaginationInputProps): React.ReactElement => (\n  <Label\n    className='m-pagination_label'\n    htmlFor='m-pagination_current-page'\n    inline\n  >\n    Page\n    <span className='u-visually-hidden'>number {page} out</span>\n    <TextInput\n      className='m-pagination_current-page'\n      id='m-pagination_current-page-default'\n      name='page'\n      type='number'\n      min='1'\n      max={pageCount}\n      pattern='[0-9]*'\n      inputMode='numeric'\n      defaultValue={page}\n      value={page}\n      onChange={e => onChange(parseInt(e.target.value))}\n    />\n    of {pageCount}\n  </Label>\n);\n"],"names":["noOp","__name","Pagination","page","pageCount","nextLabel","pageNum","setPageNum","useState","useEffect","_jsxs","_jsx","PaginationBtn","onClickPrev","prevLabel","onClickNext","e","onClickGo","PaginationInput","PaginationSubmitBtn","iconName","onClick","label","isNext","buttonCnames","iconCnames","isPrev","classnames","Icon","Label","TextInput"],"mappings":"0SAAO,MAAMA,EAAOC,EAAA,IAAM,KAAN,QCyBbC,EAAAD,EAAA,CAAA,CAAoB,KAAAE,EACzBA,UAAAA,EACAC,YAAAA,EAAAA,EACcJ,YAAAA,EAAAA,EACAA,UAAAA,EAAAA,EACFA,UAAAA,EAAAA,WACA,UAAAK,EAAA,MAEG,IAAA,CACf,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAAL,CAAA,EACAM,OAAAA,EAAAA,QAAAA,UAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAEAC,EAAA,MAAA,CACE,UAAA,eAAe,KAAA,aAAoB,aAAA,aAAwB,SAAA,CAAAC,EAAAC,EAAA,CAC3C,SAAA,OACH,QAAAC,EACAA,MAAAA,EACFC,OAAAA,EACD,CAAA,EAAAH,EAAAC,EAAA,CAEM,SAAA,QACH,QAAAG,EACAA,MAAAA,EACFV,OAAAA,EACD,CAAA,EAAAK,EAAA,OAAA,CAGR,UAAA,oBACY,OAAA,sBACH,SAAAM,GAAA,CAELA,EAAAA,eAAAA,EACAV,GAAAH,GACAc,EAAAA,EAAAA,CAAAA,CAAqB,EACvB,SAAA,CAAAN,EAAAO,EAAA,CAEgB,KAAAZ,EACRA,UAAAA,EACN,SAAAC,CACUA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAEW,CAAA,CAAA,CAClB,CAAA,CAGb,EA7CO,cA+CPY,EAAAlB,EAAA,IAAAU,EAAA,SAAA,CACE,UAAA,4CACY,GAAA,kCACP,KAAA,SACE,SAAA,IAGP,CAAA,EAPF,uBAiBAC,EAAAX,EAAA,CAAA,CAAuB,SAAAmB,EACrBA,QAAAA,EACAC,MAAAA,EACAC,OAAAA,EAAAA,GACS,OAAAC,EAAA,EAES,IAAA,CAClB,MAAAC,EAAA,CAAA,OAAA,EACAC,EAAA,CAAA,YAAA,EAEA,OAAAC,GACEF,EAAAA,KAAAA,uBAAAA,EACAC,EAAAA,KAAAA,qBAAAA,IAEAD,EAAAA,KAAAA,uBAAAA,EACAC,EAAAA,KAAAA,sBAAAA,GAGFf,EAAA,SAAA,CACE,KAAA,SACO,UAAAiB,EAAAH,CAAA,EAC6B,QAAAH,EAClC,SAAA,CAAAE,GAAAD,EAAAX,EAAA,OAAA,CAGA,UAAAgB,EAAAF,CAAA,EAAsC,SAAAL,GAAAT,EAAAiB,EAAA,CAClB,KAAAR,CAAOA,CAAAA,CAAS,CAAA,EAAAM,GAAAJ,CAAA,CAEpB,CAAA,CAGtB,EA/BA,iBAsCAJ,EAAAjB,EAAA,CAAA,CAAyB,KAAAE,EACvBA,UAAAA,EACAC,SAAAA,CAEoB,IAAAM,EAAAmB,EAAA,CACd,UAAA,qBACM,QAAA,4BACF,OAAA,GACF,SAAA,CAAA,OAAAnB,EAAA,OAAA,CAGN,UAAA,oBAAgB,SAAA,CAAA,UAAAP,EAAA,MAAA,CAAqC,CAAA,EAAAQ,EAAAmB,EAAA,CAC3C,UAAA,4BACE,GAAA,oCACP,KAAA,OACE,KAAA,SACA,IAAA,IACD,IAAA1B,EACCA,QAAAA,SACG,UAAA,UACE,aAAAD,EACIA,MAAAA,EACPA,SAAAA,GAAAA,EAAAA,SAAAA,EAAAA,OAAAA,KAAAA,CAAAA,CACyC,CAAA,EAAA,MAAAC,CAAA,CAErC,CAAA,EAzBjB;;;;;;;;;;;;;;;;;;"}