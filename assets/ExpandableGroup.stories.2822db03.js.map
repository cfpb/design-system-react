{"version":3,"file":"ExpandableGroup.stories.2822db03.js","sources":["../../../src/components/ExpandableGroup.tsx"],"sourcesContent":["import React, { ReactElement, useState } from 'react';\nimport type { ExpandableProps } from './Expandable';\n\nexport interface ExpandableGroupProps {\n  accordion?: boolean;\n  children: ReactElement<ExpandableProps>[];\n}\n\nconst ExpandableGroup: React.FC<ExpandableGroupProps> = ({\n  accordion = false,\n  children\n}) => {\n  const [activeIndex, setActiveIndex] = useState(undefined);\n  const childrenWithProps = React.Children.map(children, (child, index) => {\n    if (React.isValidElement(child) && accordion) {\n      return React.cloneElement(child, {\n        index,\n        activeIndex,\n        setActiveIndex\n      } as Pick<ExpandableProps, 'index' | 'activeIndex' | 'setActiveIndex'>);\n    }\n    return child;\n  });\n  return <div className='o-expandable-group'>{childrenWithProps}</div>;\n};\n\nexport default ExpandableGroup;\n"],"names":["ExpandableGroup","__name","accordion","children","activeIndex","setActiveIndex","useState","childrenWithProps","React","child","index","_jsx","ExpandableGroup$1"],"mappings":"mRAQA,MAAAA,EAAAC,EAAA,CAAA,CAAyD,UAAAC,EAAA,GAC3C,SAAAC,CAEd,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAA,QAAAA,SAAA,MAAA,EACAC,EAAAC,EAAA,SAAA,IAAAL,EAAA,CAAAM,EAAAC,IACEF,EAAA,eAAAC,CAAA,GAAAP,EACEM,EAAA,aAAAC,EAAA,CAAiC,MAAAC,EAC/BA,YAAAA,EACAN,eAAAA,CACAC,CAAAA,EAGJI,CAAOA,EAET,OAAAE,EAAA,MAAA,CAAO,UAAA,qBAAe,SAAAJ,CAAsBA,CAAAA,CAC9C,EAhBA,mBAkBAK,EAAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}