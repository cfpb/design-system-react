{"version":3,"mappings":";;;;gBAOC,UAAY,CAGZ,IAAIA,EAAS,CAAE,EAAC,eAGhB,SAASC,GAAa,CAGrB,QAFIC,EAAU,GAELC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAAK,CAC1C,IAAIC,EAAM,UAAUD,GACpB,GAAI,EAACC,EAEL,KAAIC,EAAU,OAAOD,EAErB,GAAIC,IAAY,UAAYA,IAAY,SACvCH,EAAQ,KAAKE,CAAG,UACN,MAAM,QAAQA,CAAG,GAC3B,GAAIA,EAAI,OAAQ,CACf,IAAIE,EAAQL,EAAW,MAAM,KAAMG,CAAG,EAClCE,GACHJ,EAAQ,KAAKI,CAAK,CAEnB,UACSD,IAAY,SAAU,CAChC,GAAID,EAAI,WAAa,OAAO,UAAU,UAAY,CAACA,EAAI,SAAS,SAAQ,EAAG,SAAS,eAAe,EAAG,CACrGF,EAAQ,KAAKE,EAAI,SAAU,GAC3B,QACA,CAED,QAASG,KAAOH,EACXJ,EAAO,KAAKI,EAAKG,CAAG,GAAKH,EAAIG,IAChCL,EAAQ,KAAKK,CAAG,CAGlB,EACD,CAED,OAAOL,EAAQ,KAAK,GAAG,CACvB,CAjCQM,kBAmC4BC,EAAO,SAC3CR,EAAW,QAAUA,EACrBQ,UAAiBR,GAOjB,OAAO,WAAaA,CAEtB,4BCnDOS,QACL,kCAeA,OAbAC,yBACEH,YACE,MAAW,YAEX,kCACA,gBAEAI,YAA4B,EAN9B,cASW,SAGbC,GAAW,IAEb,EAlBO,iKCWA,YAAc,OAAEC,MAAMC,WAAoC,KAC/D,eACAb,0CACAc,wCAEAH,OAEA,MAAW,YAEX,wCACAI,sCAEA,iBACE,gCACY,yBACe,QAAUA,CAAS,EAGlD,EAlBO,QAoBPC,WACEC,EACAC,cAA6B,UAC7B,SAFa,GADf,oBAMAA","names":["hasOwn","classNames","classes","i","arg","argType","inner","key","__name","module","useImportSvg","useEffect","setIcon","icon","name","alt","iconPath","iconHtml","getShapeModifier","withBg","isSquare"],"sources":["../../../node_modules/classnames/index.js","../../../src/hooks/useImportSvg.tsx","../../../src/components/Icon.tsx"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import { useEffect, useState } from 'react';\n\n/**\n * Dynamically import an SVG as a string\n *\n * @param path URL to SVG file\n * @returns string | null\n */\nexport const useImportSvg = (path: string) => {\n  let [icon, setIcon] = useState(null);\n\n  useEffect(() => {\n    const importSvg = async () => {\n      if (!path) return null;\n\n      const importedIcon = await import(path);\n      if (!importedIcon || !importedIcon.default) return;\n\n      setIcon(importedIcon.default);\n    };\n\n    importSvg();\n  }, [path, setIcon]);\n\n  if (!icon) return null;\n  return icon;\n};\n","import classnames from 'classnames';\nimport { useImportSvg } from '../hooks/useImportSvg';\n\ninterface IconProperties {\n  name: string;\n  alt?: string;\n  withBg?: boolean;\n}\n\n/**\n * CFPB DS Icon\n *\n * https://cfpb.github.io/design-system/foundation/iconography\n *\n * @param name Canonical icon name\n * @param alt Alt text for image\n * @param withBg With background?\n * @returns ReactElement | null\n */\nexport const Icon = ({ name, alt, withBg = false }: IconProperties) => {\n  const shapeModifier = getShapeModifier(name, withBg);\n  const classes = ['cf-icon-svg', `cf-icon-svg__${name}${shapeModifier}`];\n  const iconPath = name && `../assets/icons/${name}${shapeModifier}.svg?raw`;\n\n  const icon = useImportSvg(iconPath);\n\n  if (!icon) return null;\n\n  const iconAttrs = `class=\"${classnames(classes)}\" alt=\"${alt || name}\"`;\n  const iconHtml = `${icon}`.replace('<svg', `<svg ${iconAttrs} `);\n\n  return (\n    <span\n      className='cf-icon-svg-wrapper'\n      dangerouslySetInnerHTML={{ __html: iconHtml }}\n    />\n  );\n};\n\nconst getShapeModifier = (name: string, withBg: boolean) => {\n  if (!withBg) return '';\n  if (isSquare.includes(name)) return '-square';\n  return '-round';\n};\n\nconst isSquare = [\n  'email',\n  'facebook',\n  'flickr',\n  'github',\n  'linkedin',\n  'pinterest',\n  'twitter',\n  'youtube'\n];\n"],"file":"assets/Icon.5da837c1.js"}